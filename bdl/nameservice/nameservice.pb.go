// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nameservice/nameservice.proto

package nameservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegistrationRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Location specifies a physical location like an AWS data center or region
	Location             string   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Types                []string `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationRequest) Reset()         { *m = RegistrationRequest{} }
func (m *RegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*RegistrationRequest) ProtoMessage()    {}
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfd9526cb5a655e1, []int{0}
}

func (m *RegistrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationRequest.Unmarshal(m, b)
}
func (m *RegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationRequest.Marshal(b, m, deterministic)
}
func (m *RegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationRequest.Merge(m, src)
}
func (m *RegistrationRequest) XXX_Size() int {
	return xxx_messageInfo_RegistrationRequest.Size(m)
}
func (m *RegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationRequest proto.InternalMessageInfo

func (m *RegistrationRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegistrationRequest) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *RegistrationRequest) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type RegistrationResponse struct {
	// ID assigned to the registered broker.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationResponse) Reset()         { *m = RegistrationResponse{} }
func (m *RegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*RegistrationResponse) ProtoMessage()    {}
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfd9526cb5a655e1, []int{1}
}

func (m *RegistrationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationResponse.Unmarshal(m, b)
}
func (m *RegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationResponse.Marshal(b, m, deterministic)
}
func (m *RegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationResponse.Merge(m, src)
}
func (m *RegistrationResponse) XXX_Size() int {
	return xxx_messageInfo_RegistrationResponse.Size(m)
}
func (m *RegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationResponse proto.InternalMessageInfo

func (m *RegistrationResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BrokerRequest struct {
	// Requested location of the broker.
	Location             string   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrokerRequest) Reset()         { *m = BrokerRequest{} }
func (m *BrokerRequest) String() string { return proto.CompactTextString(m) }
func (*BrokerRequest) ProtoMessage()    {}
func (*BrokerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfd9526cb5a655e1, []int{2}
}

func (m *BrokerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrokerRequest.Unmarshal(m, b)
}
func (m *BrokerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrokerRequest.Marshal(b, m, deterministic)
}
func (m *BrokerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerRequest.Merge(m, src)
}
func (m *BrokerRequest) XXX_Size() int {
	return xxx_messageInfo_BrokerRequest.Size(m)
}
func (m *BrokerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerRequest proto.InternalMessageInfo

func (m *BrokerRequest) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *BrokerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type BrokerInfo struct {
	// Address:port of an available broker.
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrokerInfo) Reset()         { *m = BrokerInfo{} }
func (m *BrokerInfo) String() string { return proto.CompactTextString(m) }
func (*BrokerInfo) ProtoMessage()    {}
func (*BrokerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfd9526cb5a655e1, []int{3}
}

func (m *BrokerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrokerInfo.Unmarshal(m, b)
}
func (m *BrokerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrokerInfo.Marshal(b, m, deterministic)
}
func (m *BrokerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerInfo.Merge(m, src)
}
func (m *BrokerInfo) XXX_Size() int {
	return xxx_messageInfo_BrokerInfo.Size(m)
}
func (m *BrokerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerInfo proto.InternalMessageInfo

func (m *BrokerInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BrokerInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*RegistrationRequest)(nil), "nameservice.RegistrationRequest")
	proto.RegisterType((*RegistrationResponse)(nil), "nameservice.RegistrationResponse")
	proto.RegisterType((*BrokerRequest)(nil), "nameservice.BrokerRequest")
	proto.RegisterType((*BrokerInfo)(nil), "nameservice.BrokerInfo")
}

func init() { proto.RegisterFile("nameservice/nameservice.proto", fileDescriptor_bfd9526cb5a655e1) }

var fileDescriptor_bfd9526cb5a655e1 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x9b, 0x14, 0xb5, 0x1d, 0xa9, 0xe0, 0x58, 0x30, 0x04, 0x84, 0xb8, 0x07, 0xe9, 0xc5,
	0x04, 0x14, 0x7c, 0x80, 0x82, 0x82, 0x17, 0xc1, 0x78, 0xf3, 0xb6, 0xc9, 0x8e, 0xed, 0xd6, 0x26,
	0x1b, 0x77, 0xb7, 0x82, 0x2f, 0xe5, 0x33, 0x8a, 0xd9, 0x46, 0x36, 0x52, 0x7a, 0xdb, 0xd9, 0xf9,
	0xf3, 0xfb, 0xe6, 0x1b, 0xb8, 0xa8, 0x79, 0x45, 0x86, 0xf4, 0xa7, 0x2c, 0x29, 0xf3, 0xde, 0x69,
	0xa3, 0x95, 0x55, 0x78, 0xec, 0x7d, 0x31, 0x0e, 0x67, 0x39, 0x2d, 0xa4, 0xb1, 0x9a, 0x5b, 0xa9,
	0xea, 0x9c, 0x3e, 0x36, 0x64, 0x2c, 0x46, 0x70, 0xc4, 0x85, 0xd0, 0x64, 0x4c, 0x14, 0x24, 0xc1,
	0x6c, 0x9c, 0x77, 0x21, 0xc6, 0x30, 0x5a, 0xab, 0xb2, 0x2d, 0x8e, 0xc2, 0x36, 0xf5, 0x17, 0xe3,
	0x14, 0x0e, 0xec, 0x57, 0x43, 0x26, 0x1a, 0x26, 0xc3, 0xd9, 0x38, 0x77, 0x01, 0xbb, 0x82, 0x69,
	0x1f, 0x61, 0x1a, 0x55, 0x1b, 0xc2, 0x13, 0x08, 0xa5, 0xd8, 0x8e, 0x0f, 0xa5, 0x60, 0xf7, 0x30,
	0x99, 0x6b, 0xf5, 0x4e, 0xba, 0x13, 0xe1, 0xa3, 0x82, 0x7f, 0x28, 0x4f, 0x60, 0xd8, 0x13, 0xc8,
	0xee, 0x00, 0xdc, 0x98, 0xc7, 0xfa, 0x4d, 0xed, 0x59, 0xc4, 0xe1, 0xc3, 0x0e, 0x7f, 0xf3, 0x1d,
	0xc0, 0xa9, 0x6b, 0x7c, 0xe2, 0x15, 0xbd, 0x38, 0x7f, 0xf0, 0x19, 0x46, 0x4e, 0x3c, 0x69, 0x4c,
	0x52, 0xdf, 0xcc, 0x1d, 0xb6, 0xc5, 0x97, 0x7b, 0x2a, 0xdc, 0xd6, 0x6c, 0x80, 0x0f, 0x30, 0xd9,
	0xd6, 0x3b, 0x1c, 0xc6, 0xbd, 0xae, 0x9e, 0x07, 0xf1, 0xf9, 0x8e, 0xdc, 0xef, 0x62, 0x6c, 0x30,
	0x67, 0xaf, 0xc9, 0x42, 0xda, 0xe5, 0xa6, 0x48, 0x4b, 0x55, 0x65, 0xab, 0xeb, 0x25, 0x5f, 0x65,
	0x85, 0x58, 0xfb, 0x17, 0x2f, 0x0e, 0xdb, 0x93, 0xdf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x1e,
	0xd2, 0x1b, 0x9a, 0x13, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BrokerNameServiceClient is the client API for BrokerNameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BrokerNameServiceClient interface {
	// Register registers a broker with the nameserver.
	Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	// RequestBroker returns a random broker in the request location.
	RequestBroker(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerInfo, error)
}

type brokerNameServiceClient struct {
	cc *grpc.ClientConn
}

func NewBrokerNameServiceClient(cc *grpc.ClientConn) BrokerNameServiceClient {
	return &brokerNameServiceClient{cc}
}

func (c *brokerNameServiceClient) Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, "/nameservice.BrokerNameService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerNameServiceClient) RequestBroker(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerInfo, error) {
	out := new(BrokerInfo)
	err := c.cc.Invoke(ctx, "/nameservice.BrokerNameService/RequestBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerNameServiceServer is the server API for BrokerNameService service.
type BrokerNameServiceServer interface {
	// Register registers a broker with the nameserver.
	Register(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	// RequestBroker returns a random broker in the request location.
	RequestBroker(context.Context, *BrokerRequest) (*BrokerInfo, error)
}

// UnimplementedBrokerNameServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBrokerNameServiceServer struct {
}

func (*UnimplementedBrokerNameServiceServer) Register(ctx context.Context, req *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedBrokerNameServiceServer) RequestBroker(ctx context.Context, req *BrokerRequest) (*BrokerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBroker not implemented")
}

func RegisterBrokerNameServiceServer(s *grpc.Server, srv BrokerNameServiceServer) {
	s.RegisterService(&_BrokerNameService_serviceDesc, srv)
}

func _BrokerNameService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerNameServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nameservice.BrokerNameService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerNameServiceServer).Register(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerNameService_RequestBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerNameServiceServer).RequestBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nameservice.BrokerNameService/RequestBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerNameServiceServer).RequestBroker(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BrokerNameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nameservice.BrokerNameService",
	HandlerType: (*BrokerNameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _BrokerNameService_Register_Handler,
		},
		{
			MethodName: "RequestBroker",
			Handler:    _BrokerNameService_RequestBroker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nameservice/nameservice.proto",
}
