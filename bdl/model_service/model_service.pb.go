// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model_service/model_service.proto

package model_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	task_service "github.com/j-haj/bdl/task_service"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegistrationRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationRequest) Reset()         { *m = RegistrationRequest{} }
func (m *RegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*RegistrationRequest) ProtoMessage()    {}
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5c43935ebd48594, []int{0}
}

func (m *RegistrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationRequest.Unmarshal(m, b)
}
func (m *RegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationRequest.Marshal(b, m, deterministic)
}
func (m *RegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationRequest.Merge(m, src)
}
func (m *RegistrationRequest) XXX_Size() int {
	return xxx_messageInfo_RegistrationRequest.Size(m)
}
func (m *RegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationRequest proto.InternalMessageInfo

func (m *RegistrationRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type RegistrationResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationResponse) Reset()         { *m = RegistrationResponse{} }
func (m *RegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*RegistrationResponse) ProtoMessage()    {}
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5c43935ebd48594, []int{1}
}

func (m *RegistrationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationResponse.Unmarshal(m, b)
}
func (m *RegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationResponse.Marshal(b, m, deterministic)
}
func (m *RegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationResponse.Merge(m, src)
}
func (m *RegistrationResponse) XXX_Size() int {
	return xxx_messageInfo_RegistrationResponse.Size(m)
}
func (m *RegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationResponse proto.InternalMessageInfo

func (m *RegistrationResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SendResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendResponse) Reset()         { *m = SendResponse{} }
func (m *SendResponse) String() string { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()    {}
func (*SendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5c43935ebd48594, []int{2}
}

func (m *SendResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendResponse.Unmarshal(m, b)
}
func (m *SendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendResponse.Marshal(b, m, deterministic)
}
func (m *SendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendResponse.Merge(m, src)
}
func (m *SendResponse) XXX_Size() int {
	return xxx_messageInfo_SendResponse.Size(m)
}
func (m *SendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegistrationRequest)(nil), "model_service.RegistrationRequest")
	proto.RegisterType((*RegistrationResponse)(nil), "model_service.RegistrationResponse")
	proto.RegisterType((*SendResponse)(nil), "model_service.SendResponse")
}

func init() { proto.RegisterFile("model_service/model_service.proto", fileDescriptor_a5c43935ebd48594) }

var fileDescriptor_a5c43935ebd48594 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0xbb, 0x4e, 0x03, 0x31,
	0x10, 0xcc, 0x35, 0x10, 0x56, 0x09, 0x85, 0xa1, 0x88, 0x8e, 0x02, 0x30, 0x14, 0x34, 0x9c, 0x11,
	0xd4, 0x34, 0xf4, 0x34, 0x0e, 0x55, 0x1a, 0xe4, 0xb3, 0x57, 0x89, 0xf3, 0x38, 0x07, 0xaf, 0x8f,
	0x7f, 0xe2, 0x2f, 0x91, 0x63, 0x19, 0x9d, 0x11, 0xa2, 0x9c, 0xd1, 0xcc, 0xce, 0xec, 0xc0, 0xf5,
	0xce, 0x19, 0xdc, 0xbe, 0x13, 0xfa, 0x4f, 0xab, 0x51, 0x14, 0xa8, 0xd9, 0x7b, 0x17, 0x1c, 0x9b,
	0x16, 0x64, 0x7d, 0x19, 0x14, 0x6d, 0x7e, 0x0c, 0x43, 0x90, 0xf4, 0x5c, 0xc0, 0x99, 0xc4, 0xa5,
	0xa5, 0xe0, 0x55, 0xb0, 0xae, 0x93, 0xf8, 0xd1, 0x23, 0x05, 0x36, 0x83, 0x63, 0x65, 0x8c, 0x47,
	0xa2, 0x59, 0x75, 0x55, 0xdd, 0x9d, 0xc8, 0x0c, 0xf9, 0x03, 0x9c, 0x97, 0x06, 0xda, 0xbb, 0x8e,
	0x30, 0x3a, 0xa8, 0xd7, 0x3a, 0x3b, 0xc6, 0x32, 0x43, 0x7e, 0x0a, 0x93, 0x39, 0x76, 0x26, 0x2b,
	0x1f, 0xbf, 0x2a, 0x98, 0xbc, 0xc6, 0x96, 0xf3, 0xd4, 0x84, 0x2d, 0x60, 0x9a, 0x4e, 0xa2, 0x3f,
	0xf0, 0x8c, 0x37, 0xe5, 0x6b, 0x7f, 0x34, 0xac, 0x6f, 0xfe, 0xd5, 0xa4, 0x28, 0x3e, 0x62, 0xcf,
	0x30, 0x8e, 0xe1, 0x6f, 0x8a, 0x36, 0x8c, 0x35, 0xc5, 0x00, 0x91, 0xab, 0x2f, 0x7e, 0x9d, 0x19,
	0x36, 0xe5, 0xa3, 0x97, 0xdb, 0x05, 0x5f, 0xda, 0xb0, 0xea, 0xdb, 0x46, 0xbb, 0x9d, 0x58, 0xdf,
	0xaf, 0xd4, 0x5a, 0xb4, 0x66, 0x5b, 0x4e, 0xdf, 0x1e, 0x1d, 0xb6, 0x7c, 0xfa, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x6a, 0x35, 0x66, 0x4d, 0xa0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModelServiceClient interface {
	// Register is called by a model to a broker.
	RegisterModel(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	// SendTask is called by the model to send a task to the broker.
	SendTask(ctx context.Context, in *task_service.Task, opts ...grpc.CallOption) (*SendResponse, error)
}

type modelServiceClient struct {
	cc *grpc.ClientConn
}

func NewModelServiceClient(cc *grpc.ClientConn) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) RegisterModel(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, "/model_service.ModelService/RegisterModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) SendTask(ctx context.Context, in *task_service.Task, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/model_service.ModelService/SendTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServiceServer is the server API for ModelService service.
type ModelServiceServer interface {
	// Register is called by a model to a broker.
	RegisterModel(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	// SendTask is called by the model to send a task to the broker.
	SendTask(context.Context, *task_service.Task) (*SendResponse, error)
}

// UnimplementedModelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (*UnimplementedModelServiceServer) RegisterModel(ctx context.Context, req *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModel not implemented")
}
func (*UnimplementedModelServiceServer) SendTask(ctx context.Context, req *task_service.Task) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTask not implemented")
}

func RegisterModelServiceServer(s *grpc.Server, srv ModelServiceServer) {
	s.RegisterService(&_ModelService_serviceDesc, srv)
}

func _ModelService_RegisterModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).RegisterModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model_service.ModelService/RegisterModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).RegisterModel(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_SendTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task_service.Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).SendTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model_service.ModelService/SendTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).SendTask(ctx, req.(*task_service.Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model_service.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterModel",
			Handler:    _ModelService_RegisterModel_Handler,
		},
		{
			MethodName: "SendTask",
			Handler:    _ModelService_SendTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model_service/model_service.proto",
}
